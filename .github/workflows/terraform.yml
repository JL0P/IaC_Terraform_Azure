name: Terraform IaC

on:
  push:
    branches: [ "main" ]
    paths: [ "infra/**" ]
  pull_request:
    paths: [ "infra/**" ]
  workflow_dispatch:

jobs:
  tf:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: infra

    env:
      ARM_USE_OIDC: "true"
      ARM_USE_AZUREAD: "true"
      ARM_TENANT_ID:       ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_CLIENT_ID:       ${{ secrets.CLIENT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (remote state in Azure Storage)
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=infra.tfstate"

      - name: Import-or-create
        shell: bash
        run: |
          set -euo pipefail
          RG="${{ vars.resource_group }}"
          WS_NAME="${{ vars.workspace_name }}"
          APPINSIGHTS_NAME="${{ vars.appinsights_name }}"
          ACR_NAME="${{ vars.acr_name }}"
          KV_NAME="${{ vars.key_vault_name }}"
          SA_NAME="${{ vars.storage_account }}"
          CPU_CLUSTER="${{ vars.compute_name }}"

          tf_import_if_exists () { addr="$1"; id="$2"; if [ -z "$id" ]; then echo "no id for $addr"; else terraform state show "$addr" >/dev/null 2>&1 || terraform import "$addr" "$id" || true; fi; }

          APPINSIGHTS_ID="$(az monitor app-insights component show -g "$RG" -a "$APPINSIGHTS_NAME" --query id -o tsv 2>/dev/null || true)"
          WS_ID="$(az ml workspace show -g "$RG" -n "$WS_NAME" --query id -o tsv 2>/dev/null || true)"
          ACR_ID="$(az acr show -g "$RG" -n "$ACR_NAME" --query id -o tsv 2>/dev/null || true)"
          KV_ID="$(az keyvault show -g "$RG" -n "$KV_NAME" --query id -o tsv 2>/dev/null || true)"
          SA_ID="$(az storage account show -g "$RG" -n "$SA_NAME" --query id -o tsv 2>/dev/null || true)"
          CPUCLUSTER_ID="$(az ml compute show -g "$RG" -w "$WS_NAME" -n "$CPU_CLUSTER" --query id -o tsv 2>/dev/null || true)"

          tf_import_if_exists azurerm_application_insights.appi     "$APPINSIGHTS_ID"
          tf_import_if_exists azurerm_key_vault.kv                  "$KV_ID"
          tf_import_if_exists azurerm_storage_account.sa            "$SA_ID"
          tf_import_if_exists azurerm_container_registry.acr        "$ACR_ID"
          tf_import_if_exists azurerm_machine_learning_workspace.ws "$WS_ID"
          tf_import_if_exists azurerm_machine_learning_compute_cluster.cpu "$CPUCLUSTER_ID"      
      
      - name: Terraform Fmt & Validate
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -out tfplan -no-color -input=false

      - name: Terraform Show 
        if: github.event_name == 'pull_request'
        run: terraform show -no-color tfplan > plan.txt  

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: terraform apply -auto-approve -input=false tfplan
